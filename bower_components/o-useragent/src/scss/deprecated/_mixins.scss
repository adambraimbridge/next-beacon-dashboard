// appends a useragent selector to an existing list of selectors
@function _oUseragentAppendSelector ($aggregate, $useragent, $version: null) {
	@if ($version) {
		$useragent: $useragent$version;
	}
	@if(not index($_o-useragent-targeted-useragents, $useragent)) {
		$_o-useragent-targeted-useragents: append($_o-useragent-targeted-useragents, $useragent) !global;
	}
	@if (not $_o-useragent-emitted-warning) {
		$_o-useragent-emitted-warning: true !global;
	}
	$selector: o-useragent- + $useragent;
	$aggregate: append($aggregate, #{'%#{$selector}'}, comma);
	@if (not $o-useragent-is-silent) {
		$aggregate: append($aggregate, #{'.#{$selector}'}, comma);
	}
	@return $aggregate;
}

// wraps styles aimed at a particular user agent in a class (definable at product level but defaulting to o-useragent-{useragent name})
@mixin oUseragentTarget ($useragents, $versions: null) {

	$selector: null;

	// Target at version-level (may apply only to a single browser family)
	@if (count($useragents) == 1 and $versions) {
		@each $version in $versions {
			$selector: _oUseragentAppendSelector($selector, $useragents, $version);
		}

	// Target at browser-level
	} @else {
		@each $useragent in $useragents {
			$selector: _oUseragentAppendSelector($selector, $useragent);
		}
	}
	@if ($selector) {
		#{$selector} { @content }
	}
}

@mixin oUseragentListTargets() {}



@mixin _oUseragentSinglePrefix ($prefix, $prop, $val, $apply-prefix-to-value, $apply-prefix-to-prop) {
	@if ($apply-prefix-to-value) {
		$val: #{$prefix + $val};
	}
	@if ($apply-prefix-to-prop) {
		$prop: #{$prefix + $prop};
	}
	#{$prop}: $val;
}

@mixin oUseragentPrefixer ($prop, $val, $apply-prefix-to-value: false, $apply-prefix-to-prop: true, $prefixes: $o-useragent-vendor-prefixes) {
	@each $prefix in $prefixes {
		@if (index($o-useragent-vendor-prefixes, $prefix)) {
			@include _oUseragentSinglePrefix(#{'-' + $prefix + '-'}, $prop, $val, $apply-prefix-to-value, $apply-prefix-to-prop);
		}
	}
	#{$prop}: $val;
}
