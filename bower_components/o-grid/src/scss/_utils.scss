//
// Calculates column width as a percentage of the total space available
//
@function oGridColumnWidth($colspan, $total-cols) {
	@return (100% / $total-cols * $colspan);
}

//
// Calculates column width as a percentage of the total space available, but subtracting the gutter
//
@function oGridColumnWidthMinusGutter($colspan, $total-cols: 12, $gutter-width: 1%) {
	@return (oGridColumnWidth($colspan, $total-cols) - ($gutter-width * 2));
}

//
// Wraps a bundle of styles in a given selector
// If a $selector is not provided the styles are printed out unaltered
// If $include-unwrapped is true then a copy of the unaltered styles is printed in addition to the wrapped styles
//
@mixin oGridWrapInSelector($selector:null, $include-unwrapped: false) {
	@if (not $selector or $include-unwrapped) {
		@content;
	}

	@if($selector) {
		#{$selector} { @content; }
	}
}

//
// Wraps a bundle of styles in the selector used to trigger the fixed large screen layout
// If $include-unwrapped is true then a copy of the unaltered styles is printed in addition to the wrapped styles
//
@mixin oGridTargetAtFixedLarge($include-unwrapped: false) {
	@if ($include-unwrapped or $o-grid-is-fixed-large or not ($o-grid-selector-fixed-large or $o-grid-useragents-fixed-large)) {
		@content;
	}
	@if ($o-grid-selector-fixed-large) {
		#{$o-grid-selector-fixed-large} {
			@content;
		}
	} @else if ($o-grid-useragents-fixed-large) {
		@include oUseragentTarget ($o-grid-useragents-fixed-large) {
			@content;
		}
	}
}

//
// Writes a media query selector for given maximum and minimum screen widths
// If $force is set to true, then if $min and $max are undefined it will write out the styles wrapped in @media screen, otherwise writes nothing
//
@mixin oGridMinMaxMediaQuery($min, $max, $force:false) {
	@if ($min and $max) {
		@media screen and (min-#{$o-grid-mq-type}:$min+1) and (max-#{$o-grid-mq-type}:$max) { @content; }
	} @else if ($min) {
		@media screen and (min-#{$o-grid-mq-type}:$min+1) { @content; }
	} @else if ($max) {
		@media screen and (max-#{$o-grid-mq-type}:$max) { @content; }
	} @else if ($force) {
		// We need to set a minimum width because @media screen works in IE7
		// and we hide CSS that we don't want in IE6-IE8 in media queries
		@media screen and (min-width: 1px) { @content; }
	}
}

//
// Adds cross-browser box-sizing styles
//
@mixin oGridBoxSizing($value, $usepolyfill: false) {
	-moz-box-sizing: $value;
	box-sizing: $value;

	@if $usepolyfill {
		@warn "o-grid no longer provides a polyfill for boxsizing in ie7";
	}
}

//
// Wraps the given styles in a media query that target a given layout size (S, M , L, XL)
//
@mixin oGridRespondTo($layout-sizes) {

	@each $layout-size in $layout-sizes {
		@if $layout-size == S {
			@include oGridMinMaxMediaQuery(null, $o-grid-small-max-width) { @content; }
		} @else if $layout-size == M {
			@include oGridMinMaxMediaQuery($o-grid-small-max-width, $o-grid-medium-max-width) { @content; }
		} @else if $layout-size == L {
			@include oGridMinMaxMediaQuery($o-grid-medium-max-width, $o-grid-large-max-width) { @content; }
		} @else if $layout-size == XL {
			@include oGridMinMaxMediaQuery($o-grid-large-max-width, null) { @content; }
		} @else {
			@include oGridMinMaxMediaQuery(null, null, true) { @content; }
		}

		@if $layout-size == L {
			@include oGridTargetAtFixedLarge() { @content; }
		}
	}
}
