//
// Defines styles for row and column widths for a given layout size
//
// @param $layout-size {string} name of layout size (s, m , l, xl)
// @param $maxWidth {number} maximum width of a row at this layout size
//
@mixin oGridDefineLayout($layout-size, $max-width) {

	@include oGridRespondTo($layout-size) {

		$gutter-width: $o-grid-default-gutter;
		@if ($layout-size == S) {
			$gutter-width: $o-grid-small-gutter;
		}

		@include oGridClass((row row, box row), true) {
			margin-left: -($gutter-width / 2);
			margin-right: -($gutter-width / 2);
		}

		@include oGridColumnSelector() {
			padding-left: $gutter-width / 2;
			padding-right: $gutter-width / 2;
		}

		@if ($max-width) {
			@include oGridClass(row page) {
				@if ($o-grid-is-fluid) {
					max-width: $max-width;
				} @else {
					width: $max-width;
				}
			}
		}
		@include oGridColumnWidths($layout-size, 12);
	}

	@include _oGridGutterOverrides($layout-size);
}


//
// Defines styles for column widths for a given layout size
//
// @param $layout-size {string} name of layout size (S, M , L, XL)
//
@mixin oGridColumnWidths($layout-size, $column-count, $default: false) {

	@include oGridColumnSelector($layout-size, hide 0) {
		display: none;
	}

	$aggregated-selector: null;
	$column-count-minus-one: $column-count - 1;

	@for $colspan from 1 through $column-count-minus-one {

		@include oGridColumnSelector($layout-size, $colspan) {
			@if ($default) {
				width: oGridColumnWidthMinusGutter($colspan, $column-count);
			} @else {
				width: oGridColumnWidth($colspan, $column-count);
			}

		}

		$aggregated-selector: append($aggregated-selector, oGridColumnSelector($layout-size, $colspan), comma);
	}

	@if (not $default and $layout-size != default) {
		// ensures that for a case like 0 M8, M8 will have display: block instead of display: none
		#{$aggregated-selector} {
			float: left;
			clear: none;
			display: block;
		}
	}
	@include oGridColumnSelector($layout-size, $column-count) {
		float: none;
		clear: both;
		display: block;
		@if ($default) {
			width: oGridColumnWidthMinusGutter($column-count, $column-count);
		} @else {
			width: 100%;
		}
	}
}

@mixin oGridFixedGridStyles() {
	@include oGridClass((row row, box row), true) {
		margin-left: -$o-grid-small-gutter;
		margin-right: -$o-grid-small-gutter;
		width: auto;
	}

	@include oGridColumnSelector() {
		float: left;
		padding-left: $o-grid-small-gutter;
		padding-right: $o-grid-small-gutter;
		@include oGridBoxSizing(border-box);
	}

	@include oGridCompactStyles(false);

	@include oGridColumnWidths(default, 12);

	// if the grid is responsive then the respondTo mixin adds the following styles, but if not we need to do it here
	@if ($o-grid-is-fixed-large) {
		@include oGridColumnWidths(L, 12);
	}

	body {
		min-width: $o-grid-large-max-width;
	}

	@include oGridClass(row page) {
		width: $o-grid-large-max-width;
		max-width: none; // must be 'none' rather than $o-grid-large-max-width in order to avoid a very obscure ie7 bug
	}

	@include oGridColumnSelector(S, 12) {
		clear: none;
	}

	@include _oGridGutterOverrides(L);
	@include _oGridGutterOverrides(default);
}

@mixin oGridOverrideDefaultGrid () {
	@include oGridColumnSelector(S, 0 hide) {
		display: block;
	}

	@include oGridColumnSelector(S, 12) {
		clear: none;
	}

	$aggregated-selector: null;

	@for $colWidth from 0 through 12 {

		// generates a comma separated selector for each of the column widths from 1 to 11
		$aggregated-selector: append($aggregated-selector, oGridColumnSelector(S, $colWidth), comma);

	}

	@include oGridWrapInSelector($aggregated-selector) {
		width: auto;
	}
}

@mixin oGridCompactStyles($wrapped: false) {
	.o-grid-row-compact {
		&> #{oGridColumnSelector()} {
			padding-left: 0;
			padding-right: 0;
		}
	}

	@if ($wrapped) {
		@include oGridTargetAtFixedLarge(true) {
			@include oGridSilenceableCompactMargins();
		}
	} @else {
		@include oGridSilenceableCompactMargins();
	}
}

@mixin oGridSilenceableCompactMargins() {
	.o-grid-row%o-grid-row-compact,
	.o-grid-row .o-grid-row%o-grid-row-compact {
		margin-left: 0;
		margin-right: 0;
	}

	@if (not $o-grid-is-silent) {
		.o-grid-row.o-grid-row-compact,
		.o-grid-row .o-grid-row.o-grid-row-compact {
			margin-left: 0;
			margin-right: 0;
		}
	}
}
